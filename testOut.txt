缓冲区 //初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}

try
after
the input code is
第0行：//初始化
第1行：//定义变量b
第2行：int a,b,c;
第3行：real d,e,f;
第4行：{
第5行：a=2.23;
第6行：while(a==8){
第7行：if(1>2)
第8行：then
第9行：b=2*a;
第10行：else
第11行：{
第12行：b=1+3;
第13行：a=1;
第14行：}
第15行：}
第16行：b=a/3;
第17行：while(a<=2.23)
第18行：a=2+(2*5);
第19行：}
end

//初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> == 
接收==
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收8
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> ifstmt 
使用的语法：ifstmt-> if ( boolexpr ) then stmt else stmt 
接收if
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> > 
接收>
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
接收then
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
接收else
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
使用的语法：stmts->空
接收}
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime-> / simpleexpr multexprprime 
接收/
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> <= 
接收<=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ( arithexpr ) 
接收(
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> Num 
接收5
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
a: 12
c: 0
b: 0
e: 0.0
d: 0.0
f: 0.0
缓冲区 int a;
real b;
{
b=3.1;
a=b;
}
try
after
the input code is
第0行：int a;
第1行：real b;
第2行：{
第3行：b=3.1;
第4行：a=b;
第5行：}
end

int a;
real b;
{
b=3.1;
a=b;
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3.1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收b
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
a: 3
b: 3.1
缓冲区 int a1.0;
real b;
{
b=3.1;
a=b;
}
try
after
the input code is
第0行：int a1.0;
第1行：real b;
第2行：{
第3行：b=3.1;
第4行：a=b;
第5行：}
end

int a1.0;
real b;
{
b=3.1;
a=b;
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3.1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收b
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
缓冲区 int a=1.0;
real b;
{
b=3.1;
a=b;
}
try
after
the input code is
第0行：int a=1.0;
第1行：real b;
第2行：{
第3行：b=3.1;
第4行：a=b;
第5行：}
end

int a=1.0;
real b;
{
b=3.1;
a=b;
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3.1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收b
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
在6行 1位置 代码在尾端冗余
缓冲区 int a=1.9;
real b;
{
b=3.1;
a=b;
}
try
after
the input code is
第0行：int a=1.9;
第1行：real b;
第2行：{
第3行：b=3.1;
第4行：a=b;
第5行：}
end

int a=1.9;
real b;
{
b=3.1;
a=b;
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3.1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收b
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
缓冲区 //初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}

try
after
the input code is
第0行：//初始化
第1行：//定义变量b
第2行：int a,b,c;
第3行：real d,e,f;
第4行：{
第5行：a=2.23;
第6行：while(a==8){
第7行：if(1>2)
第8行：then
第9行：b=2*a;
第10行：else
第11行：{
第12行：b=1+3;
第13行：a=1;
第14行：}
第15行：}
第16行：b=a/3;
第17行：while(a<=2.23)
第18行：a=2+(2*5);
第19行：}
end

//初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> == 
接收==
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收8
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> ifstmt 
使用的语法：ifstmt-> if ( boolexpr ) then stmt else stmt 
接收if
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> > 
接收>
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
接收then
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
接收else
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
使用的语法：stmts->空
接收}
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime-> / simpleexpr multexprprime 
接收/
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> <= 
接收<=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ( arithexpr ) 
接收(
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> Num 
接收5
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
a: 12
c: 0
b: 0
e: 0.0
d: 0.0
f: 0.0
