缓冲区 //初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}

try
try_after
after
the input code is
第0行：//初始化
第1行：//定义变量b
第2行：int a,b,c;
第3行：real d,e,f;
第4行：{
第5行：a=2.23;
第6行：while(a==8){
第7行：if(1>2)
第8行：then
第9行：b=2*a;
第10行：else
第11行：{
第12行：b=1+3;
第13行：a=1;
第14行：}
第15行：}
第16行：b=a/3;
第17行：while(a<=2.23)
第18行：a=2+(2*5);
第19行：}
end

//初始化
//定义变量b
int a,b,c;
real d,e,f;
{
a=2.23;
while(a==8){
if(1>2)
then
b=2*a;
else
{
b=1+3;
a=1;
}
}
b=a/3;
while(a<=2.23)
a=2+(2*5);
}
UI出错误
使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> == 
接收==
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收8
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> ifstmt 
使用的语法：ifstmt-> if ( boolexpr ) then stmt else stmt 
接收if
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> > 
接收>
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
接收then
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
接收else
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
使用的语法：stmts->空
接收}
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime-> / simpleexpr multexprprime 
接收/
使用的语法：simpleexpr-> Num 
接收3
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
使用的语法：boolop-> <= 
接收<=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime->空
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ( arithexpr ) 
接收(
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> Num 
接收5
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收)
使用的语法：multexprprime->空
使用的语法：arithexprprime->空
接收;
使用的语法：stmts->空
接收}
语法成功！！！
out:使用的语法：program-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：boolop-> == 
接收==
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收8
接收)
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> ifstmt 
使用的语法：ifstmt-> if ( boolexpr ) then stmt else stmt 
接收if
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：boolop-> > 
接收>
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
接收)
接收then
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> ID 
接收a
接收;
接收else
使用的语法：stmt-> compoundstmt 
使用的语法：compoundstmt-> { stmts } 
接收{
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收3
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收1
接收;
接收}
接收}
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收b
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：multexprprime-> / simpleexpr multexprprime 
接收/
使用的语法：simpleexpr-> Num 
接收3
接收;
使用的语法：stmts-> stmt stmts 
使用的语法：stmt-> whilestmt 
使用的语法：whilestmt-> while ( boolexpr ) stmt 
接收while
接收(
使用的语法：boolexpr-> arithexpr boolop arithexpr 
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ID 
接收a
使用的语法：boolop-> <= 
接收<=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2.23
接收)
使用的语法：stmt-> assgstmt 
使用的语法：assgstmt-> ID = arithexpr ; 
接收a
接收=
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：arithexprprime-> + multexpr arithexprprime 
接收+
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> ( arithexpr ) 
接收(
使用的语法：arithexpr-> multexpr arithexprprime 
使用的语法：multexpr-> simpleexpr multexprprime 
使用的语法：simpleexpr-> Num 
接收2
使用的语法：multexprprime-> * simpleexpr multexprprime 
接收*
使用的语法：simpleexpr-> Num 
接收5
接收)
接收;
接收}

key: a value:Identifiers{name='a', type='int', value='0', tacName='ID0'}
key: b value:Identifiers{name='b', type='int', value='0', tacName='ID1'}
key: c value:Identifiers{name='c', type='int', value='0', tacName='ID2'}
key: d value:Identifiers{name='d', type='real', value='0', tacName='ID3'}
key: e value:Identifiers{name='e', type='real', value='0', tacName='ID4'}
key: f value:Identifiers{name='f', type='real', value='0', tacName='ID5'}
UI输出t1 = 2.23
UI输出ID0 = t1
UI输出L1:
UI输出t2 = ID0
UI输出t3 = 8
UI输出if t2 != t3 goto L2
UI输出t4 = 1
UI输出t5 = 2
UI输出if t4 <= t5 goto L3
UI输出t6 = 2 * ID0
UI输出t7 = t6
UI输出ID1 = t7
UI输出goto L4
UI输出L3:
UI输出t8 = 1 + 3
UI输出ID1 = t8
UI输出t9 = 1
UI输出ID0 = t9
UI输出L4:
UI输出goto L1
UI输出L2:
UI输出t10 = ID0 / 3
UI输出t11 = t10
UI输出ID1 = t11
UI输出L5:
UI输出t12 = ID0
UI输出t13 = 2.23
UI输出if t12 > t13 goto L6
UI输出t14 = 2 * 5
UI输出t15 = t14
UI输出t16 = 2 + t15
UI输出ID0 = t16
UI输出goto L5
UI输出L6:
a: 12
c: 0
b: 0
e: 0.0
d: 0.0
f: 0.0
UI输出a: 12
UI输出c: 0
UI输出b: 0
UI输出e: 0.0
UI输出d: 0.0
UI输出f: 0.0
